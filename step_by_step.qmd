---
title: "De.KCD - Data Management Platform on the Cloud, step by step"
---

Process and documentation on adapting a docker-based Data Management platform, Seek4Science, to Kubernetes, and using it in the cloud.

# Goals and scope

This documentation is intended as a quickstart for setting up and managing one or several Data Management platforms, while considering the benefits and costs: how much effort, how complex, the security risks, what is gain.
It does not replace a detailed explanation on each topics, but intend on saving time in (1) deciding which solution to adopt, (2) understand enough of each solution to navigate efficiently through their documentation, (3) give working and explained solutions that can be used as it or as base for your own solution.

It goes from a simple local setup to a full Kubernetes based set-up with distributed data, with some side documentations on Authentication and Authorization, setting up a Central Identity Service, monitoring and logging and considerations for connecting applications in the cloud.

We try to give a clear view on the cost and benefit of each solution so it is easy to have a rough idea what solution is the best. It is quickly summarized and emphasized at each section.

We will also compile advices and tips, and we welcome all contributions (and corrections).

Finally it is targeted mostly at Research Projects and/or Institutions so focus on the particular aspects in this cases.

# How to use

Each section assumes that you know the precedents. If you already know one section, feel free to jump to the next one.

# Quick introduction to Linux/Unix

::: {.callout-tip}
## Recommended learning path

Online documentations and tutorials are enough for the basic.
A book is strongly recommended for advanced topics.

Learning difficulty from easy (the basic) to very hard (how it all works). For dealing with a cloud installation it is probably intermediate as you should have some knowledge about security concerns.
:::

* Check external introduction
* Check Galaxy training for deeper knowledge

For most set-up, Linux is the operating system of choice. Due to security concern, a minimal knowledge of it is probably a must in all cases, from bare-metal setup to cloud-based installation, though the useful set will change.


There is a good Linux tutorial on the Carpentry.


??? We list below the commands you should know to survive, and their eventual options (note that some of these command now run on Windows using the Terminal shell), following by the important folder, user and group access on Unix, private and public keys and ssl/ssh. This part is more a check list of things you should know for the following topics, and we recommend that you learn those before continuing. Wikipedia is a good starting point and there are many easy to find good tutorials online. Books are needed only for a deep understanding, but are also stronly recommended if you use Linux a lot and deal with advanced topics.
Note that Linux is not the only Unix, OpenBSD and FreeBSD being good alternative, but all Unix are very similar for their core usage and structure. The package managers will differ a lot, but also differ on Linux between Debian-based Linux (dpkg), RedHat-based Linux (rpm or yum) and Ubuntu-based Linux (apt-get), to list the main ones.


ls    ls -al -> list the content of a directory

cd -> go to a directory (cd .. to go to the parent folder, cd / for the root folder, cd ~ for the user home folder)

ps ps -edf ps -aux -> list the running processes and their owner

top -> show the current running processes and their memory/cpu usage (CTRL-C to end)

more

less

vim/emacs

man -> show the manual for a command

ln -> create a symbolic link

chown/chmod -> change the owner of a file or folder, change the permissions of a file or a folder (see below)

Cgroups ???

# Overview of Docker usage

A clear presentation of Docker is available [here](https://container.training/intro-selfpaced.yml.html#1) and the [official documentation](https://docs.docker.com/engine/) is good. The section you should consult is "Open Source", so about Docker Engine, Docker Build and Docker Compose. If running Docker on Windows, you might want to use Docker Desktop, which is also proposing a single node Kubernetes and is the simples way to use and test Docker and Kubernetes on Windows.

(consider PodMan too)

# How to build a Dockerfile

# Moving to Docker compose

## Advantages

## Things to take into account

Adding parameters

The different types of volumes

## Namespaces and namespaces collisions

Namespacing is by using the name of the containing folder of the docker-compose file. Using the same name, even in different parent folder, will use the same namespace.


# From Docker compose to Kubernetes

Quick overview

-> Kubernetes section

-> First vocabulary

## Labels in Kubernetes

# Other solutions

# Scalability

# Databases

# Security

# Going to an assembly

This is a Quarto website.

To learn more about Quarto websites visit <https://quarto.org/docs/websites>.
